#!/data/data/com.termux/files/usr/bin/bash -e

# =======================================================
# 原创作者：劳cd (QQ: 2042716620)
# 谁说国人用不了🤓
# Kali NetHunter Termux 安装脚本
# 本脚本只为国人有更好的体验

# =======================================================

function check_deps() {
    for tool in wget proot tar; do
        if ! command -v $tool &>/dev/null; then
            echo "[*] 检测到缺少依赖: $tool"
            pkg install $tool -y || {
                echo "[!] 无法自动安装 $tool，请手动安装: pkg install $tool"
                exit 1
            }
        fi
    done
}

# 在下载前调用该函数
check_deps

VERSION=2024091801
BASE_URL=https://image-nethunter.kali.org/nethunter-fs/kali-2025.1
USERNAME=kali

function unsupported_arch() {
    printf "${red}"
    echo "[*] 不支持的设备架构\n\n"
    printf "${reset}"
    exit
}

function ask() {
    while true; do
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        printf "${light_cyan}\n[?] "
        read -p "$1 [$prompt] " REPLY

        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        printf "${reset}"

        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

function get_arch() {
    printf "${blue}[*] 正在检测设备架构 ...${reset}"
    case $(getprop ro.product.cpu.abi) in
        arm64-v8a)
            SYS_ARCH=arm64
            printf "\n${green}[+] 设备架构: ${green}arm64${reset}\n"
            ;;
        armeabi|armeabi-v7a)
            SYS_ARCH=armhf
            printf "\n${green}[+] 设备架构: ${green}armhf${reset}\n"
            ;;
        *)
            printf "${red}\n[!] 错误: 不支持的架构! 仅支持 arm64/armhf。${reset}\n"
            exit 1
            ;;
    esac
}

function set_strings() {
    echo && echo
    if [[ ${SYS_ARCH} == "arm64" ]]; then
        echo -e "========= NetHunter 镜像选择 ========="
        echo -e "\033[1;34m[1] NetHunter ARM64 (完整版)\033[0m"
        echo -e "\033[1;34m[2] NetHunter ARM64 (精简版)\033[0m"
        echo -e "\033[1;34m[3] NetHunter ARM64 (纳米版)\033[0m"
        read -p "请选择要安装的镜像类型 [1-3]: " wimg
        case $wimg in
            1) wimg="full" ;;
            2) wimg="minimal" ;;
            3) wimg="nano" ;;
            *) wimg="full" ;;
        esac
    elif [[ ${SYS_ARCH} == "armhf" ]]; then
        echo -e "========= NetHunter 镜像选择 ========="
        echo -e "\033[1;34m[1] NetHunter ARMhf (完整版)\033[0m"
        echo -e "\033[1;34m[2] NetHunter ARMhf (精简版)\033[0m"
        echo -e "\033[1;34m[3] NetHunter ARMhf (纳米版)\033[0m"
        read -p "请选择要安装的镜像类型 [1-3]: " wimg
        case $wimg in
            1) wimg="full" ;;
            2) wimg="minimal" ;;
            3) wimg="nano" ;;
            *) wimg="full" ;;
        esac
    fi

    CHROOT="kali-${SYS_ARCH}"
    IMAGE_NAME="kali-nethunter-2025.1-rootfs-${wimg}-${SYS_ARCH}.tar.xz"
    SHA_NAME="${IMAGE_NAME}.sha512sum"
    printf "\n[+] 镜像文件名: ${green}${IMAGE_NAME}${reset}\n"
}

function prepare_fs() {
    unset KEEP_CHROOT
    if [ -d ${CHROOT} ]; then
        if ask "检测到已存在的 rootfs 目录，是否删除并创建新的？" "N"; then
            rm -rf ${CHROOT}
        else
            KEEP_CHROOT=1
        fi
    fi
} 

function cleanup() {
    if [ -f "${IMAGE_NAME}" ]; then
        if ask "是否删除已下载的 rootfs 文件？" "N"; then
        if [ -f "${IMAGE_NAME}" ]; then
                rm -f "${IMAGE_NAME}"
        fi
        if [ -f "${SHA_NAME}" ]; then
                rm -f "${SHA_NAME}"
        fi
        fi
    fi
} 

function check_dependencies() {
    printf "${blue}\n[*] 正在检查软件包依赖...${reset}\n"
    apt-get update -y &> /dev/null || apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" dist-upgrade -y &> /dev/null

    for i in proot tar axel; do
        if [ -e "$PREFIX"/bin/$i ]; then
            echo "  $i 已安装"
        else
            printf "正在安装 ${i}...\n"
            apt install -y $i || {
                printf "${red}错误: 无法安装必要软件包。\n 退出安装。\n${reset}"
            exit
            }
        fi
    done
    apt upgrade -y
}

function get_url() {
    BASE_URL="https://image-nethunter.kali.org/nethunter-fs/kali-2025.1"
    ROOTFS_URL="${BASE_URL}/${IMAGE_NAME}"
    SHA_URL="${BASE_URL}/${SHA_NAME}"

    printf "${blue}[*] 正在验证镜像链接...${reset}\n"
    if ! curl --head --silent --fail "${ROOTFS_URL}" >/dev/null; then
        printf "${red}[!] 错误: 镜像不存在! 请检查以下链接：\n${ROOTFS_URL}\n${reset}"
        exit 1
    fi
    printf "[+] 镜像可下载: ${green}${ROOTFS_URL}${reset}\n"
}

function get_rootfs() {
    unset KEEP_IMAGE
    if [ -f "${IMAGE_NAME}" ]; then
        if ask "检测到已下载的镜像文件，是否重新下载？ [y/N] " "N"; then
            rm -f "${IMAGE_NAME}"
        else
            printf "${yellow}[!] 使用现有镜像文件: ${IMAGE_NAME}${reset}\n"
            KEEP_IMAGE=1
            return
        fi
    fi

    printf "${blue}[*] 正在下载 root 文件系统 (${IMAGE_NAME})...${reset}\n"
    get_url
    if ! wget --continue --tries=3 --timeout=60 "${ROOTFS_URL}"; then
        printf "${red}[!] 下载失败! 请手动下载并放入当前目录：\n${ROOTFS_URL}\n${reset}"
        exit 1
    fi
}

function check_sha_url() {
    if ! curl --head --silent --fail "${SHA_URL}" > /dev/null; then
        echo "[!] SHA 文件不存在或无法访问"
        return 1
    fi
    return 0
}

function verify_sha() {
    if [ -z $KEEP_IMAGE ]; then
        printf "\n${blue}[*] 正在验证 rootfs 完整性...${reset}\n\n"
        if [ -f "${SHA_NAME}" ]; then
            sha512sum -c "$SHA_NAME" || {
                printf "${red} rootfs 文件已损坏。请重新运行安装程序或手动下载文件\n${reset}"
                exit 1
            }
        else
            echo "[!] 未找到 SHA 文件，跳过验证..."    
        fi    
    fi
}

function get_sha() {
    if [ -z $KEEP_IMAGE ]; then
        printf "\n${blue}[*] 正在获取 SHA 校验码... ${reset}\n\n"
        get_url
        if [ -f "${SHA_NAME}" ]; then
            rm -f "${SHA_NAME}"
        fi        
        if check_sha_url; then
            echo "[+] SHA 文件存在，继续下载..."
            wget --continue "${SHA_URL}"
            verify_sha
        else
            echo "[!] SHA 文件不存在，跳过下载。"
        fi
    fi        
}

function extract_rootfs() {
    if [ -z $KEEP_CHROOT ]; then
        printf "\n${blue}[*] 正在解压 rootfs... ${reset}\n\n"
        proot --link2symlink tar -xf "$IMAGE_NAME" 2> /dev/null || :
    else        
        printf "${yellow}[!] 使用现有的 rootfs 目录${reset}\n"
    fi
}

function create_launcher() {
    NH_LAUNCHER=${PREFIX}/bin/nethunter
    NH_SHORTCUT=${PREFIX}/bin/nh
    cat > "$NH_LAUNCHER" <<- EOF
#!/data/data/com.termux/files/usr/bin/bash -e
cd \${HOME}
unset LD_PRELOAD
if [ ! -f $CHROOT/root/.version ]; then
    touch $CHROOT/root/.version
fi

user="$USERNAME"
home="/home/\$user"
start="sudo -u kali /bin/bash"

if grep -q "kali" ${CHROOT}/etc/passwd; then
    KALIUSR="1";
else
    KALIUSR="0";
fi
if [[ \$KALIUSR == "0" || ("\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R")) ]];then
    user="root"
    home="/\$user"
    start="/bin/bash --login"
    if [[ "\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R") ]];then
        shift
    fi
fi

cmdline="proot \\
        --link2symlink \\
        -0 \\
        -r $CHROOT \\
        -b /dev \\
        -b /proc \\
        -b /sdcard \\
        -b $CHROOT\$home:/dev/shm \\
        -w \$home \\
           /usr/bin/env -i \\
           HOME=\$home \\
           PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin \\
           TERM=\$TERM \\
           LANG=C.UTF-8 \\
           \$start"

cmd="\$@"
if [ "\$#" == "0" ];then
    exec \$cmdline
else
    \$cmdline -c "\$cmd"
fi
EOF

    chmod 700 "$NH_LAUNCHER"
    if [ -L "${NH_SHORTCUT}" ]; then
        rm -f "${NH_SHORTCUT}"
    fi
    if [ ! -f "${NH_SHORTCUT}" ]; then
        ln -s "${NH_LAUNCHER}" "${NH_SHORTCUT}" >/dev/null
    fi
}

function check_kex() {
    if [ "$wimg" = "nano" ] || [ "$wimg" = "minimal" ]; then
        nh sudo apt update && nh sudo apt install -y tightvncserver kali-desktop-xfce
    fi
}

function create_kex_launcher() {
    KEX_LAUNCHER=${CHROOT}/usr/bin/kex
    cat > $KEX_LAUNCHER <<- EOF
#!/bin/bash

function start-kex() {
    if [ ! -f ~/.vnc/passwd ]; then
        passwd-kex
    fi
    USR=\$(whoami)
    if [ \$USR == "root" ]; then
        SCREEN=":2"
    else
        SCREEN=":1"
    fi 
    export MOZ_FAKE_NO_SANDBOX=1; export HOME=\${HOME}; export USER=\${USR}; LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgcc_s.so.1 nohup vncserver \$SCREEN >/dev/null 2>&1 </dev/null
    starting_kex=1
    return 0
}

function stop-kex() {
    vncserver -kill :1 | sed s/"Xtigervnc"/"NetHunter KeX"/
    vncserver -kill :2 | sed s/"Xtigervnc"/"NetHunter KeX"/
    return $?
}

function passwd-kex() {
    vncpasswd
    return $?
}

function status-kex() {
    sessions=\$(vncserver -list | sed s/"TigerVNC"/"NetHunter KeX"/)
    if [[ \$sessions == *"590"* ]]; then
        printf "\n\${sessions}\n"
        printf "\n您可以使用 KeX 客户端连接到以上任意会话。\n\n"
    else
        if [ ! -z \$starting_kex ]; then
            printf '\n启动 KeX 服务器时出错。\n请尝试 "nethunter kex kill" 或重启 Termux 会话后重试。\n\n'
        fi
    fi
    return 0
}

function kill-kex() {
    pkill Xtigervnc
    return \$?
}

case \$1 in
    start)
        start-kex
        ;;
    stop)
        stop-kex
        ;;
    status)
        status-kex
        ;;
    passwd)
        passwd-kex
        ;;
    kill)
        kill-kex
        ;;
    *)
        stop-kex
        start-kex
        status-kex
        ;;
esac
EOF

    chmod 700 $KEX_LAUNCHER
}

function fix_profile_bash() {
    if [ -f ${CHROOT}/root/.bash_profile ]; then
        sed -i '/if/,/fi/d' "${CHROOT}/root/.bash_profile"
    fi
}

function fix_resolv_conf() {
    echo "nameserver 9.9.9.9" > $CHROOT/etc/resolv.conf
    echo "nameserver 149.112.112.112" >> $CHROOT/etc/resolv.conf
}

function fix_sudo() {
    chmod +s $CHROOT/usr/bin/sudo
    chmod +s $CHROOT/usr/bin/su
    echo "kali    ALL=(ALL:ALL) ALL" > $CHROOT/etc/sudoers.d/kali
    echo "Set disable_coredump false" > $CHROOT/etc/sudo.conf
}

function fix_uid() {
    USRID=$(id -u)
    GRPID=$(id -g)
    nh -r usermod -u "$USRID" kali 2>/dev/null
    nh -r groupmod -g "$GRPID" kali 2>/dev/null
}

function print_banner() {
    clear
    printf "${blue}##################################################\n"
    printf "${blue}##                                              ##\n"
    printf "${blue}##  88      a8P         db        88        88  ##\n"
    printf "${blue}##  88    .88'         d88b       88        88  ##\n"
    printf "${blue}##  88   88'          d8''8b      88        88  ##\n"
    printf "${blue}##  88 d88           d8'  '8b     88        88  ##\n"
    printf "${blue}##  8888'88.        d8YaaaaY8b    88        88  ##\n"
    printf "${blue}##  88P   Y8b      d8''''''''8b   88        88  ##\n"
    printf "${blue}##  88     '88.   d8'        '8b  88        88  ##\n"
    printf "${blue}##  88       Y8b d8'          '8b 888888888 88  ##\n"
    printf "${blue}##                                              ##\n"
    printf "${blue}####  ############# NetHunter ####################${reset}\n\n"
    printf "${red}         _           _        _ _        \n"
    printf "${red}        | |         (_)      | | |       \n"
    printf "${red}        | | __ _ ___ _ ___   | | |_ ___  \n"
    printf "${red}    _   | |/ _\` / __| / __|  | | __/ _ \ \n"
    printf "${red}   | |__| | (_| \__ \ \__ \  | | || (_) |\n"
    printf "${red}    \____/ \__,_|___/_|___/   \_\_\___/ \n"
    printf "${green}------------------------------------------\n"
    printf "${green}      原创作者: 劳cd (QQ: 2042716620)     \n"
    printf "${green}      中国定制版 Kali NetHunter Termux     \n"
    printf "${green}------------------------------------------\n"
    printf "${reset}"
}

##################################
##             主程序           ##

red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'

cd "$HOME"
print_banner
get_arch
set_strings
prepare_fs
check_dependencies
get_rootfs
get_sha
extract_rootfs
create_launcher
cleanup

printf "\n${blue}[*] 正在配置 NetHunter for Termux ...\n"
fix_profile_bash
fix_resolv_conf
fix_sudo
check_kex
create_kex_launcher
fix_uid

print_banner
printf "${green}[=] Kali NetHunter for Termux 安装成功！${reset}\n\n"
printf "${green}[+] 启动方式:${reset}\n"
printf "${green}[+] nethunter             # 启动 CLI 模式${reset}\n"
printf "${green}[+] nethunter kex passwd  # 设置 KeX 密码${reset}\n"
printf "${green}[+] nethunter kex &       # 启动 GUI 模式${reset}\n"
printf "${green}[+] nethunter kex stop    # 停止 GUI 模式${reset}\n"
printf "${green}[+] nethunter -r          # 以 root 身份运行${reset}\n"
printf "${green}[+] nh                    # 快捷命令${reset}\n\n"
printf "${yellow}[*] 注意: 首次启动GUI需要较长时间初始化${reset}\n"
printf "${yellow}[*] 技术支持: QQ群 1040302092${reset}\n\n"
